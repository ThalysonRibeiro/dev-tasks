generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  DONE
  IN_PROGRESS
  STOPPED
  NOT_STARTED
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  STANDARD
}

model Goals {
  id                     String            @id @default(cuid())
  title                  String
  desiredWeeklyFrequency Int
  userId                 String
  goalCompletions        GoalCompletions[]
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model GoalCompletions {
  id     String @id @default(cuid())
  goalId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  goal Goals @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model Desktop {
  id        String   @id @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupe    Group[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        String   @id @default(cuid())
  title     String
  textColor String
  desktopId String
  desktop   Desktop  @relation(fields: [desktopId], references: [id], onDelete: Cascade)
  item      Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id          String   @id @default(cuid())
  title       String
  status      Status   @default(NOT_STARTED)
  term        DateTime
  priority    Priority @default(STANDARD)
  notes       String
  description String
  groupId     String?
  group       Group?   @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  desktop       Desktop[]
  accounts      Account[]
  sessions      Session[]
  goals         Goals[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
